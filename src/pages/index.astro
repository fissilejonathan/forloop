---
import BaseLayout from "../layouts/BaseLayout.astro"
import { getCollection } from "astro:content";

const posts = [
  ...(await getCollection("link")),
  ...(await getCollection("article")),
].sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const tags = posts
  .flatMap((post) => post.data.tags)
  .reduce((acc, current) => acc.add(current), new Set());
---

<BaseLayout>
  <div class="flex sm:grid grid-cols-3 space-x-5">
    <ul id="posts" class="col-span-2 space-y-4 lg:space-y-3">
      {
        posts.map((post) => {
          let href = null;

          if ("url" in post.data) {
            href = post.data.url;
          } else {
            href = `/${post.slug}`;
          }

          return (
            <li data-tags={post.data.tags.join(",")}>
              <a
                class="sm:flex sm:space-x-3"
                target="_blank"
                title={post.data.title}
                href={href}
              >
                <span>{post.data.title}</span>
                <span class="flex space-x-[5px] sm:justify-center sm:items-center">
                  {post.data.tags.map((tag) => (
                    <span class="border-black rounded-md border-[1px] px-1 text-[0.7rem] font-medium h-[20px] dark:border-white">
                      {tag}
                    </span>
                  ))}
                </span>
              </a>
            </li>
          );
        })
      }
    </ul>
    <div class="col-span-1 hidden sm:block">
      {
        [...tags].sort().map((tag) => (
          <div data-tag class="text-sm p-[3px] cursor-pointer">
            {tag}
          </div>
        ))
      }
    </div>
    <script>
      const tags = document.querySelectorAll("[data-tag]");

      tags.forEach((tag) => {
        tag.addEventListener("click", (event) => {
          const targetTag = event.target as HTMLElement;
          const selectedTags = document.querySelectorAll("[data-selected]");

          const tagAlreadySelected = Array.prototype.some.call(
            selectedTags,
            (tag) => tag.innerText === targetTag.innerText
          );

          if (tagAlreadySelected) {
            targetTag.classList.remove("font-extrabold");
            targetTag.removeAttribute("data-selected");
          } else {
            targetTag.classList.add("font-extrabold");
            targetTag.setAttribute("data-selected", "");
          }

          const updatedSelectedTags = Array.prototype.map.call(
            document.querySelectorAll("[data-selected]"),
            (element) => element.innerText
          ) as string[];

          const posts = document.querySelectorAll("#posts li");

          if (updatedSelectedTags.length > 0) {
            posts.forEach((post) => {
              const postTags = post.getAttribute("data-tags")?.split(",");

              const postHasTag = postTags?.some((postTag) =>
                updatedSelectedTags.includes(postTag)
              );

              if (!postHasTag) {
                post.classList.add("hidden");
              } else {
                post.classList.remove("hidden");
              }
            });
          } else {
            posts.forEach((post) => {
              post.classList.remove("hidden");
            });
          }
        });
      });
    </script>
  </div>
</BaseLayout>